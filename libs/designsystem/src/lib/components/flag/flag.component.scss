@use 'sass:map';
@use '~@kirbydesign/core/src/scss/utils';

:host {
  display: inline-block;
  background-color: var(--kirby-flag-background-color, transparent);
  color: var(--kirby-flag-color, utils.get-color('white-contrast'));
  border: 1px solid var(--kirby-flag-border-color, utils.get-color('medium'));
  border-radius: utils.size('xxxs');
  font-size: utils.font-size('n');
  padding: utils.size('xxxxs') utils.size('xxs');
  font-weight: utils.font-weight('medium');

  &.sm {
    font-size: utils.font-size('s');
  }

  &.xs {
    font-size: utils.font-size('xs');
    padding-left: utils.size('xxxs');
    padding-right: utils.size('xxxs');
  }
}

$_flag-notification-colors: map.merge(
  utils.$notification-colors,
  (
    'semi-light': utils.get-color('semi-light'),
  )
);
$_flag-notification-colors: map.remove($_flag-notification-colors, 'danger');

@each $color-name, $color-value in $_flag-notification-colors {
  :host(.#{$color-name}) {
    // Use utils.get-color() to assign a custom property instead of a color value.
    // Custom properties can be overridden in consumer projects.
    --kirby-flag-background-color: #{utils.get-color($color-name)};
    --kirby-flag-color: #{utils.get-color($color-name + '-contrast')};
    --kirby-flag-border-color: #{utils.get-color($color-name)};
  }
}

// <kirby-flag> uses a different "danger" notification color.
// Overriding `--kirby-danger` in a consumer project will not have any effect on
// the background color for danger flags.
// See https://github.com/kirbydesign/designsystem/issues/2041
:host(.danger) {
  --kirby-flag-background-color: #{utils.$danger-background-weak};
  --kirby-flag-color: #{utils.$danger-background-weak-contrast};
  --kirby-flag-border-color: #{utils.$danger-background-weak};
}
